import React, { RefObject, PropsWithoutRef, PureComponent, ClipboardEvent, DragEvent } from "react";
import { Tool, BoldTool as _BoldTool1, ItalicTool as _ItalicTool1, UnderlineTool as _UnderlineTool1, StrikeThroughTool as _StrikeThroughTool1, H1Tool as _H1Tool1, H2Tool as _H2Tool1, H3Tool as _H3Tool1, FontSizeDownTool as _FontSizeDownTool1, FontSizeUpTool as _FontSizeUpTool1, SubscriptTool as _SubscriptTool1, SuperscriptTool as _SuperscriptTool1, LinkTool as _LinkTool1, ColorName, ColorTool, ForeColorTool as _ForeColorTool1, BackColorTool as _BackColorTool1, AlignLeftTool as _AlignLeftTool1, AlignCenterTool as _AlignCenterTool1, AlignRightTool as _AlignRightTool1, AlignFullTool as _AlignFullTool1, OrderedListTool as _OrderedListTool1, UnorderedListTool as _UnorderedListTool1, HorizontalRuleTool as _HorizontalRuleTool1, IFrameTool as _IFrameTool1, ImageTool as _ImageTool1, AudioTool as _AudioTool1, VideoTool as _VideoTool1, UndoTool as _UndoTool1, RedoTool as _RedoTool1, ResetTool as _ResetTool1, ClearTool as _ClearTool1 } from "edkit";
import { Constructor } from "web-utility";
export function renderTool(this: Tool, editor: RefObject<HTMLElement>): JSX.Element;
export class BoldTool extends _BoldTool1 {
    icon: string;
    render: typeof renderTool;
}
export class ItalicTool extends _ItalicTool1 {
    icon: string;
    render: typeof renderTool;
}
export class UnderlineTool extends _UnderlineTool1 {
    icon: string;
    render: typeof renderTool;
}
export class StrikeThroughTool extends _StrikeThroughTool1 {
    icon: string;
    render: typeof renderTool;
}
export class H1Tool extends _H1Tool1 {
    icon: string;
    render: typeof renderTool;
}
export class H2Tool extends _H2Tool1 {
    icon: string;
    render: typeof renderTool;
}
export class H3Tool extends _H3Tool1 {
    icon: string;
    render: typeof renderTool;
}
export class FontSizeDownTool extends _FontSizeDownTool1 {
    icon: string;
    render: typeof renderTool;
}
export class FontSizeUpTool extends _FontSizeUpTool1 {
    icon: string;
    render: typeof renderTool;
}
export class SubscriptTool extends _SubscriptTool1 {
    icon: string;
    render: typeof renderTool;
}
export class SuperscriptTool extends _SuperscriptTool1 {
    icon: string;
    render: typeof renderTool;
}
export class LinkTool extends _LinkTool1 {
    icon: string;
    render: typeof renderTool;
}
export type ColorSelectorProps = PropsWithoutRef<{
    className?: string;
    title?: string;
    icon: string;
    type: ColorName;
    value?: string;
    onChange?(color: string): any;
}>;
export function ColorSelector({ className, title, type, value, onChange, icon }: ColorSelectorProps): JSX.Element;
export function renderColorTool(this: ColorTool, editor: RefObject<HTMLElement>): JSX.Element;
export class ForeColorTool extends _ForeColorTool1 {
    icon: string;
    render: typeof renderColorTool;
}
export class BackColorTool extends _BackColorTool1 {
    icon: string;
    render: typeof renderColorTool;
}
export class AlignLeftTool extends _AlignLeftTool1 {
    icon: string;
    render: typeof renderTool;
}
export class AlignCenterTool extends _AlignCenterTool1 {
    icon: string;
    render: typeof renderTool;
}
export class AlignRightTool extends _AlignRightTool1 {
    icon: string;
    render: typeof renderTool;
}
export class AlignFullTool extends _AlignFullTool1 {
    icon: string;
    render: typeof renderTool;
}
export class OrderedListTool extends _OrderedListTool1 {
    icon: string;
    render: typeof renderTool;
}
export class UnorderedListTool extends _UnorderedListTool1 {
    icon: string;
    render: typeof renderTool;
}
export class HorizontalRuleTool extends _HorizontalRuleTool1 {
    icon: string;
    render: typeof renderTool;
}
export class IFrameTool extends _IFrameTool1 {
    icon: string;
    render: typeof renderTool;
}
export class ImageTool extends _ImageTool1 {
    icon: string;
    render: typeof renderTool;
}
export class AudioTool extends _AudioTool1 {
    icon: string;
    render: typeof renderTool;
}
export class VideoTool extends _VideoTool1 {
    icon: string;
    render: typeof renderTool;
}
export class UndoTool extends _UndoTool1 {
    icon: string;
    render: typeof renderTool;
}
export class RedoTool extends _RedoTool1 {
    icon: string;
    render: typeof renderTool;
}
export class ResetTool extends _ResetTool1 {
    icon: string;
    render: typeof renderTool;
}
export class ClearTool extends _ClearTool1 {
    icon: string;
    render: typeof renderTool;
}
export const TextTools: (typeof StrikeThroughTool)[];
export const ColorTools: (typeof ForeColorTool)[];
export const LayoutTools: (typeof AlignLeftTool | typeof OrderedListTool)[];
export const MediaTools: (typeof IFrameTool)[];
export const ControlTools: (typeof UndoTool | typeof ClearTool)[];
export const OriginalTools: (typeof UndoTool | typeof ClearTool)[];
export const DefaultTools: (typeof UndoTool | typeof ClearTool)[];
export type EditorProps = PropsWithoutRef<{
    tools?: {
        new (...args: any[]): Tool;
    }[];
    defaultValue?: string;
    onChange?(value: string): any;
}>;
interface EditorState {
    toolList: Tool[];
    data: string;
}
export class Editor extends PureComponent<EditorProps, EditorState> {
    static displayName: string;
    box: React.RefObject<HTMLDivElement>;
    state: {
        toolList: Tool[];
        data: string;
    };
    static getDerivedStateFromProps({ tools, defaultValue }: EditorProps, { toolList, data }: EditorState): EditorState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    updateTools: () => void;
    uploadFile(Type: Constructor<ImageTool> | Constructor<AudioTool> | Constructor<VideoTool>, data: string | Blob): Promise<string>;
    clearHTML(markup: string): Promise<DocumentFragment>;
    handlePasteDrop: (event: ClipboardEvent | DragEvent) => Promise<void>;
    render(): JSX.Element;
}

//# sourceMappingURL=index.d.ts.map
