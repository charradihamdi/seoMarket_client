export function getAnchorElement(): HTMLElement;
export abstract class Tool {
    abstract name: string;
    abstract icon: string;
    tags?: string[];
    keys?: string[];
    command?: string;
    inputs?: string[];
    get usable(): boolean;
    protected getActive(): boolean;
    get active(): boolean;
    get title(): string;
    protected edit(editor: HTMLElement, ...data: any[]): void;
    execute(editor: HTMLElement, ...data: any[]): void;
    /**
     * Render a Tool control
     *
     * @param editor An `HTMLElement` object or its wrapper for `[contenteditable="true"]`
     *
     * @returns Virtual DOM of UI engines
     */
    abstract render(editor: any): any;
}
export abstract class FileTool extends Tool {
    save(data: Blob): Promise<string>;
    codeOf(path: string): string;
    execute(editor: HTMLElement): Promise<void>;
}
export abstract class BoldTool extends Tool {
    name: string;
    tags: string[];
    keys: string[];
    command: string;
}
export abstract class ItalicTool extends Tool {
    name: string;
    tags: string[];
    keys: string[];
    command: string;
}
export abstract class UnderlineTool extends Tool {
    name: string;
    tags: string[];
    keys: string[];
    command: string;
}
export abstract class StrikeThroughTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class H1Tool extends Tool {
    name: string;
    tags: string[];
    command: string;
    execute(editor: HTMLElement): void;
}
export abstract class H2Tool extends Tool {
    name: string;
    tags: string[];
    command: string;
    execute(editor: HTMLElement): void;
}
export abstract class H3Tool extends Tool {
    name: string;
    tags: string[];
    command: string;
    execute(editor: HTMLElement): void;
}
export abstract class FontSizeDownTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class FontSizeUpTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class SubscriptTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class SuperscriptTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class LinkTool extends Tool {
    name: string;
    tags: string[];
    inputs: string[];
    command: string;
}
export type ColorName = 'color' | 'backgroundColor';
export abstract class ColorTool extends Tool {
    abstract colorName: ColorName;
    getColor(): string;
    get active(): boolean;
    execute(editor: HTMLElement, color: string): void;
}
export abstract class ForeColorTool extends ColorTool {
    name: string;
    command: string;
    colorName: ColorName;
}
export abstract class BackColorTool extends ColorTool {
    name: string;
    command: string;
    colorName: ColorName;
}
export type AlignMode = 'left' | 'center' | 'right' | 'justify';
export abstract class AlignTool extends Tool {
    abstract align: AlignMode;
    get active(): boolean;
}
export abstract class AlignLeftTool extends AlignTool {
    name: string;
    command: string;
    align: AlignMode;
}
export abstract class AlignCenterTool extends AlignTool {
    name: string;
    command: string;
    align: AlignMode;
}
export abstract class AlignRightTool extends AlignTool {
    name: string;
    command: string;
    align: AlignMode;
}
export abstract class AlignFullTool extends AlignTool {
    name: string;
    command: string;
    align: AlignMode;
}
export abstract class OrderedListTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class UnorderedListTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class HorizontalRuleTool extends Tool {
    name: string;
    tags: string[];
    command: string;
}
export abstract class IFrameTool extends Tool {
    name: string;
    tags: string[];
    command: string;
    execute(editor: HTMLElement): void;
}
export abstract class ImageTool extends FileTool {
    name: string;
    tags: string[];
    command: string;
    codeOf(path: string): string;
}
export abstract class AudioTool extends FileTool {
    name: string;
    tags: string[];
    command: string;
    codeOf(path: string): string;
}
export abstract class VideoTool extends FileTool {
    name: string;
    tags: string[];
    command: string;
    codeOf(path: string): string;
}
export abstract class UndoTool extends Tool {
    name: string;
    command: string;
}
export abstract class RedoTool extends Tool {
    name: string;
    command: string;
}
export abstract class ResetTool extends Tool {
    name: string;
    command: string;
}
export abstract class ClearTool extends Tool {
    name: string;
    execute(editor: HTMLElement): void;
}

//# sourceMappingURL=index.d.ts.map
