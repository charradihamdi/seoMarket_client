{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { productConstants } from \"./constants\";\nexport const getProductsBySlug = slug => {\n  return async dispatch => {\n    const res = await axios.get(`/products/${slug}`);\n    console.log(\"resproducts\", res);\n\n    if (res.status === 200) {\n      dispatch({\n        type: productConstants.GET_PRODUCTS_BY_SLUG,\n        payload: res.data\n      });\n    } else {// dispatch({\n      //     type:\n      // })\n    }\n  };\n};\nexport const getProductPage = payload => {\n  return async dispatch => {\n    try {\n      const {\n        cid,\n        type\n      } = payload.params;\n      type = \"product\";\n      const res = await axios.get(`/page/${cid}/${type}`);\n      dispatch({\n        type: productConstants.GET_PRODUCT_PAGE_REQUEST\n      });\n\n      if (res.status === 200) {\n        const {\n          page\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_SUCCESS,\n          payload: {\n            page\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getProductDetailsById = payload => {\n  return async dispatch => {\n    dispatch({\n      type: productConstants.GET_PRODUCT_DETAILS_BY_ID_REQUEST\n    });\n    let res;\n\n    try {\n      const {\n        productId\n      } = payload.params;\n      res = await axios.get(`/product/${productId}`);\n      console.log(res);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_SUCCESS,\n        payload: {\n          productDetails: res.data.product\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n}; // modified actrion\n\nexport const addProduct = form => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.ADD_PRODUCT_REQUEST\n      });\n      const res = await axios.post(`product/create`, form);\n\n      if (res.status === 201) {\n        dispatch({\n          type: productConstants.ADD_PRODUCT_SUCCESS\n        });\n        dispatch(getProducts());\n      } else {\n        dispatch({\n          type: productConstants.ADD_PRODUCT_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst getProducts = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.GET_ALL_PRODUCTS_REQUEST\n      });\n      const res = await axios.post(`product/getProducts`);\n\n      if (res.status === 200) {\n        const {\n          products\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_SUCCESS,\n          payload: {\n            products\n          }\n        });\n      } else {\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/charr/Desktop/testSite/client/src/actions/product.action.js"],"names":["axios","productConstants","getProductsBySlug","slug","dispatch","res","get","console","log","status","type","GET_PRODUCTS_BY_SLUG","payload","data","getProductPage","cid","params","GET_PRODUCT_PAGE_REQUEST","page","GET_PRODUCT_PAGE_SUCCESS","error","GET_PRODUCT_PAGE_FAILURE","getProductDetailsById","GET_PRODUCT_DETAILS_BY_ID_REQUEST","productId","GET_PRODUCT_DETAILS_BY_ID_SUCCESS","productDetails","product","GET_PRODUCT_DETAILS_BY_ID_FAILURE","addProduct","form","ADD_PRODUCT_REQUEST","post","ADD_PRODUCT_SUCCESS","getProducts","ADD_PRODUCT_FAILURE","GET_ALL_PRODUCTS_REQUEST","products","GET_ALL_PRODUCTS_SUCCESS","GET_ALL_PRODUCTS_FAILURE"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\nimport { productConstants } from \"./constants\";\n\nexport const getProductsBySlug = (slug) => {\n  return async (dispatch) => {\n    const res = await axios.get(`/products/${slug}`);\n    console.log(\"resproducts\", res);\n    if (res.status === 200) {\n      dispatch({\n        type: productConstants.GET_PRODUCTS_BY_SLUG,\n        payload: res.data,\n      });\n    } else {\n      // dispatch({\n      //     type:\n      // })\n    }\n  };\n};\n\nexport const getProductPage = (payload) => {\n  return async (dispatch) => {\n    try {\n      const { cid, type } = payload.params;\n      type = \"product\";\n      const res = await axios.get(`/page/${cid}/${type}`);\n      dispatch({ type: productConstants.GET_PRODUCT_PAGE_REQUEST });\n      if (res.status === 200) {\n        const { page } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_SUCCESS,\n          payload: { page },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const getProductDetailsById = (payload) => {\n  return async (dispatch) => {\n    dispatch({ type: productConstants.GET_PRODUCT_DETAILS_BY_ID_REQUEST });\n    let res;\n    try {\n      const { productId } = payload.params;\n      res = await axios.get(`/product/${productId}`);\n      console.log(res);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_SUCCESS,\n        payload: { productDetails: res.data.product },\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_FAILURE,\n        payload: { error: res.data.error },\n      });\n    }\n  };\n};\n\n// modified actrion\nexport const addProduct = (form) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.ADD_PRODUCT_REQUEST });\n      const res = await axios.post(`product/create`, form);\n      if (res.status === 201) {\n        dispatch({ type: productConstants.ADD_PRODUCT_SUCCESS });\n        dispatch(getProducts());\n      } else {\n        dispatch({ type: productConstants.ADD_PRODUCT_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst getProducts = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.GET_ALL_PRODUCTS_REQUEST });\n      const res = await axios.post(`product/getProducts`);\n      if (res.status === 200) {\n        const { products } = res.data;\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_SUCCESS,\n          payload: { products },\n        });\n      } else {\n        dispatch({ type: productConstants.GET_ALL_PRODUCTS_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}