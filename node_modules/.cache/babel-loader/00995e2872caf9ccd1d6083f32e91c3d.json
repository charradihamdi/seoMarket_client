{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { productConstants } from \"./constants\";\nexport const getProductsBySlug = slug => {\n  return async dispatch => {\n    const res = await axios.get(`/products/${slug}`);\n    if (res.status === 200) {\n      dispatch({\n        type: productConstants.GET_PRODUCTS_BY_SLUG,\n        payload: res.data\n      });\n    } else {\n      // dispatch({\n      //     type:\n      // })\n    }\n  };\n};\nexport const getProductPage = payload => {\n  return async dispatch => {\n    try {\n      const {\n        cid,\n        type\n      } = payload.params;\n      type = \"product\";\n      const res = await axios.get(`/page/${cid}/${type}`);\n      dispatch({\n        type: productConstants.GET_PRODUCT_PAGE_REQUEST\n      });\n      if (res.status === 200) {\n        const {\n          page\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_SUCCESS,\n          payload: {\n            page\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getProductDetailsById = payload => {\n  return async dispatch => {\n    dispatch({\n      type: productConstants.GET_PRODUCT_DETAILS_BY_ID_REQUEST\n    });\n    let res;\n    try {\n      const {\n        productId\n      } = payload.params;\n      res = await axios.get(`/product/${productId}`);\n      console.log(\"res1200\", res);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_SUCCESS,\n        payload: {\n          productDetails: res.data.product\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\n\n// modified actrion\nexport const addProduct = form => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.ADD_PRODUCT_REQUEST\n      });\n      const res = await axios.post(`product/create`, form);\n      if (res.status === 201) {\n        dispatch({\n          type: productConstants.ADD_PRODUCT_SUCCESS\n        });\n        dispatch(getProducts());\n      } else {\n        dispatch({\n          type: productConstants.ADD_PRODUCT_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getProducts = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.GET_ALL_PRODUCTS_REQUEST\n      });\n      const res = await axios.post(`product/getProducts`);\n      if (res.status === 200) {\n        const {\n          products\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_SUCCESS,\n          payload: {\n            products\n          }\n        });\n      } else {\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const getProductsByUserId = id => {\n  console.log(id);\n  return async dispatch => {\n    try {\n      dispatch({\n        type: productConstants.GET_User_PRODUCTS_REQUEST\n      });\n      const res = await axios.get(`/${id}/products`);\n      console.log(\"res11\", res);\n      if (res.status === 200) {\n        const {\n          products\n        } = res.data;\n        dispatch({\n          type: productConstants.GET_User_PRODUCTS_SUCCESS,\n          payload: {\n            products\n          }\n        });\n      } else {\n        dispatch({\n          type: productConstants.GET_User_PRODUCTS_FAILURE\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"names":["axios","productConstants","getProductsBySlug","slug","dispatch","res","get","status","type","GET_PRODUCTS_BY_SLUG","payload","data","getProductPage","cid","params","GET_PRODUCT_PAGE_REQUEST","page","GET_PRODUCT_PAGE_SUCCESS","error","GET_PRODUCT_PAGE_FAILURE","console","log","getProductDetailsById","GET_PRODUCT_DETAILS_BY_ID_REQUEST","productId","GET_PRODUCT_DETAILS_BY_ID_SUCCESS","productDetails","product","GET_PRODUCT_DETAILS_BY_ID_FAILURE","addProduct","form","ADD_PRODUCT_REQUEST","post","ADD_PRODUCT_SUCCESS","getProducts","ADD_PRODUCT_FAILURE","GET_ALL_PRODUCTS_REQUEST","products","GET_ALL_PRODUCTS_SUCCESS","GET_ALL_PRODUCTS_FAILURE","getProductsByUserId","id","GET_User_PRODUCTS_REQUEST","GET_User_PRODUCTS_SUCCESS","GET_User_PRODUCTS_FAILURE"],"sources":["C:/Users/charr/Desktop/testSite/client/src/actions/product.action.js"],"sourcesContent":["import axios from \"../helpers/axios\";\nimport { productConstants } from \"./constants\";\n\nexport const getProductsBySlug = (slug) => {\n  return async (dispatch) => {\n    const res = await axios.get(`/products/${slug}`);\n\n    if (res.status === 200) {\n      dispatch({\n        type: productConstants.GET_PRODUCTS_BY_SLUG,\n        payload: res.data,\n      });\n    } else {\n      // dispatch({\n      //     type:\n      // })\n    }\n  };\n};\n\nexport const getProductPage = (payload) => {\n  return async (dispatch) => {\n    try {\n      const { cid, type } = payload.params;\n      type = \"product\";\n      const res = await axios.get(`/page/${cid}/${type}`);\n      dispatch({ type: productConstants.GET_PRODUCT_PAGE_REQUEST });\n      if (res.status === 200) {\n        const { page } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_SUCCESS,\n          payload: { page },\n        });\n      } else {\n        const { error } = res.data;\n        dispatch({\n          type: productConstants.GET_PRODUCT_PAGE_FAILURE,\n          payload: { error },\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const getProductDetailsById = (payload) => {\n  return async (dispatch) => {\n    dispatch({ type: productConstants.GET_PRODUCT_DETAILS_BY_ID_REQUEST });\n    let res;\n    try {\n      const { productId } = payload.params;\n      res = await axios.get(`/product/${productId}`);\n      console.log(\"res1200\", res);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_SUCCESS,\n        payload: { productDetails: res.data.product },\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: productConstants.GET_PRODUCT_DETAILS_BY_ID_FAILURE,\n        payload: { error: res.data.error },\n      });\n    }\n  };\n};\n\n// modified actrion\nexport const addProduct = (form) => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.ADD_PRODUCT_REQUEST });\n      const res = await axios.post(`product/create`, form);\n      if (res.status === 201) {\n        dispatch({ type: productConstants.ADD_PRODUCT_SUCCESS });\n        dispatch(getProducts());\n      } else {\n        dispatch({ type: productConstants.ADD_PRODUCT_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const getProducts = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.GET_ALL_PRODUCTS_REQUEST });\n      const res = await axios.post(`product/getProducts`);\n      if (res.status === 200) {\n        const { products } = res.data;\n        dispatch({\n          type: productConstants.GET_ALL_PRODUCTS_SUCCESS,\n          payload: { products },\n        });\n      } else {\n        dispatch({ type: productConstants.GET_ALL_PRODUCTS_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const getProductsByUserId = (id) => {\n  console.log(id);\n  return async (dispatch) => {\n    try {\n      dispatch({ type: productConstants.GET_User_PRODUCTS_REQUEST });\n      const res = await axios.get(`/${id}/products`);\n      console.log(\"res11\", res);\n      if (res.status === 200) {\n        const { products } = res.data;\n        dispatch({\n          type: productConstants.GET_User_PRODUCTS_SUCCESS,\n          payload: { products },\n        });\n      } else {\n        dispatch({ type: productConstants.GET_User_PRODUCTS_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}