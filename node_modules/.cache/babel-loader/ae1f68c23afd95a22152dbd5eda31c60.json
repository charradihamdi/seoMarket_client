{"ast":null,"code":"/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule checkReactTypeSpec\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar loggedTypeFailures = {};\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?object} element The React element that is being type-checked\n * @param {?number} debugID The React component instance that is being type-checked\n * @private\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n        var componentStackInfo = '';\n        if (process.env.NODE_ENV !== 'production') {\n          var ReactComponentTreeDevtool = require('./ReactComponentTreeDevtool');\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeDevtool.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeDevtool.getCurrentStackAddendum(element);\n          }\n        }\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\nmodule.exports = checkReactTypeSpec;","map":{"version":3,"names":["_prodInvariant","require","ReactPropTypeLocationNames","invariant","warning","loggedTypeFailures","checkReactTypeSpec","typeSpecs","values","location","componentName","element","debugID","typeSpecName","hasOwnProperty","error","process","env","NODE_ENV","ex","Error","message","componentStackInfo","ReactComponentTreeDevtool","getStackAddendumByID","getCurrentStackAddendum","module","exports"],"sources":["C:/Users/charr/Desktop/testSite/client/node_modules/react-wysiwyg-editor/node_modules/react/lib/checkReactTypeSpec.js"],"sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule checkReactTypeSpec\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar loggedTypeFailures = {};\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?object} element The React element that is being type-checked\n * @param {?number} debugID The React component instance that is being type-checked\n * @private\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var componentStackInfo = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          var ReactComponentTreeDevtool = require('./ReactComponentTreeDevtool');\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeDevtool.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeDevtool.getCurrentStackAddendum(element);\n          }\n        }\n\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\n\nmodule.exports = checkReactTypeSpec;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAEpD,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAA8B,CAAC;AAExE,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC7C,IAAIG,OAAO,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAEzC,IAAII,kBAAkB,GAAG,CAAC,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,CAACC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACxF,KAAK,IAAIC,YAAY,IAAIN,SAAS,EAAE;IAClC,IAAIA,SAAS,CAACO,cAAc,CAACD,YAAY,CAAC,EAAE;MAC1C,IAAIE,KAAK;MACT;MACA;MACA;MACA,IAAI;QACF;QACA;QACA,EAAE,OAAOR,SAAS,CAACM,YAAY,CAAC,KAAK,UAAU,CAAC,GAAGG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGf,SAAS,CAAC,KAAK,EAAE,mFAAmF,EAAEO,aAAa,IAAI,aAAa,EAAER,0BAA0B,CAACO,QAAQ,CAAC,EAAEI,YAAY,CAAC,GAAGb,cAAc,CAAC,IAAI,EAAEU,aAAa,IAAI,aAAa,EAAER,0BAA0B,CAACO,QAAQ,CAAC,EAAEI,YAAY,CAAC,GAAG,KAAK,CAAC;QACxYE,KAAK,GAAGR,SAAS,CAACM,YAAY,CAAC,CAACL,MAAM,EAAEK,YAAY,EAAEH,aAAa,EAAED,QAAQ,CAAC;MAChF,CAAC,CAAC,OAAOU,EAAE,EAAE;QACXJ,KAAK,GAAGI,EAAE;MACZ;MACAH,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGd,OAAO,CAAC,CAACW,KAAK,IAAIA,KAAK,YAAYK,KAAK,EAAE,iEAAiE,GAAG,+DAA+D,GAAG,iEAAiE,GAAG,gEAAgE,GAAG,iCAAiC,EAAEV,aAAa,IAAI,aAAa,EAAER,0BAA0B,CAACO,QAAQ,CAAC,EAAEI,YAAY,EAAE,OAAOE,KAAK,CAAC,GAAG,KAAK,CAAC;MAC5e,IAAIA,KAAK,YAAYK,KAAK,IAAI,EAAEL,KAAK,CAACM,OAAO,IAAIhB,kBAAkB,CAAC,EAAE;QACpE;QACA;QACAA,kBAAkB,CAACU,KAAK,CAACM,OAAO,CAAC,GAAG,IAAI;QAExC,IAAIC,kBAAkB,GAAG,EAAE;QAE3B,IAAIN,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACzC,IAAIK,yBAAyB,GAAGtB,OAAO,CAAC,6BAA6B,CAAC;UACtE,IAAIW,OAAO,KAAK,IAAI,EAAE;YACpBU,kBAAkB,GAAGC,yBAAyB,CAACC,oBAAoB,CAACZ,OAAO,CAAC;UAC9E,CAAC,MAAM,IAAID,OAAO,KAAK,IAAI,EAAE;YAC3BW,kBAAkB,GAAGC,yBAAyB,CAACE,uBAAuB,CAACd,OAAO,CAAC;UACjF;QACF;QAEAK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGd,OAAO,CAAC,KAAK,EAAE,sBAAsB,EAAEK,QAAQ,EAAEM,KAAK,CAACM,OAAO,EAAEC,kBAAkB,CAAC,GAAG,KAAK,CAAC;MACtI;IACF;EACF;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGrB,kBAAkB"},"metadata":{},"sourceType":"script"}